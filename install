#!/usr/bin/env zsh

# TODO: brew update
# TODO: ~/.Brewfile OR HOMEBREW_BUNDLE_FILE_GLOBAL environment variables (use with `brew bundle isntall --global`)

if [[ $1 == "help" ]]; then
    echo "Usage:"; echo "\tzsh install [symlink|home|work] [dock]"
    exit 0
fi

home_files=(".aliases" ".bash_profile" ".bashrc" ".editorconfig" ".exports" ".functions" ".gitconfig" ".inputrc" ".profile" ".tmux.conf" ".zprofile" ".zshenv" ".zshrc")
home_directories=(".ssh")
config_files=("starship.toml")
config_directories=("fish" "ghostty" "lazygit" "nvim" "pypoetry" "wezterm" "zed" "zellij")

# install brew
if ! command -v brew > /dev/null; then
	echo "installing brew...";
	bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	echo "brew installed; run install again to continue";
	exit 0
fi

# install brew dependencies
if [[ "$1" != "symlink" ]]; then
    if command -v brew > /dev/null; then
        brew update
    	if ! brew bundle --file Brewfile.rb check > /dev/null; then
    		brew bundle install --no-lock --file Brewfile.rb
    	fi
    	if [[ "$1" == "home" ]]; then
    	   if ! brew bundle --file Brewfile.home.rb check > /dev/null; then
    			brew bundle install --no-lock --file Brewfile.home.rb
    		fi
    	fi
    	if [[ "$1" == "work" ]]; then
    	   if ! brew bundle --file Brewfile.work.rb check > /dev/null; then
    			brew bundle install --no-lock --file Brewfile.work.rb
    		fi
    	fi
    fi
fi

# make sure directories exist
if [ ! -d "$HOME/.config" ]; then
    mkdir "$HOME/.config"
fi

if [ ! -d "$HOME/.zsh_site_functions" ]; then
    mkdir "$HOME/.zsh_site_functions"
fi

# create symlinks
repo="$( cd "$( dirname "$0" )" && pwd )"

symlink_fn() {
	local file_or_folder=$1
	local target_dir=$2

	local source="$repo/$file_or_folder"
	local target="$target_dir/$file_or_folder"

	local source_does_not_exist=0

	if [ ! -f $source ]; then
		if [ ! -d $source ]; then
			source_does_not_exist=1
		fi
	fi
	if [[ $source_does_not_exist = 1 ]]; then
		echo "'$source': file does not exist (ERROR)"
	else
		if [ -f $target ]; then
			if [ -L $target ]; then
				echo "'$target' already exists (symlink ok)"
			else
				echo "'$target' already exists (CONFLICT)"
			fi
		elif [ -d "$target" ]; then
			if [ -L $target ]; then
				echo "'$target' already exists (symlink ok)"
			else
				echo "'$target' already exists (CONFLICT)"
			fi
		else
			if command -v gln > /dev/null; then
				gln -svT $source $target
			else
				ln -sv $source $target
			fi
		fi
	fi
}

for file ("$home_files[@]"); do
	symlink_fn $file $HOME
done

for folder ("$home_directories[@]"); do
	symlink_fn $folder $HOME
done

for file ("$config_files[@]"); do
	symlink_fn $file $HOME/.config
done

for folder ("$config_directories[@]"); do
	symlink_fn $folder $HOME/.config
done

# configure dock
dock_fn() {
    local app=$1
    defaults write com.apple.dock persistent-apps -array-add "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>$app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
}

apps=(
    "/Applications/Safari.app"
    "/Applications/Chromium.app"
    "/Applications/Raindrop.io.app"
    "/Applications/Proton Mail.app"
    "/Applications/Obsidian.app"
    "/Applications/Spotify.app"
    "/Applications/Reminders.app"
    "/Applications/Freetube.app"
    "/Applications/Zed.app"
    "/Applications/Alacritty.app"
)

if [[ $2 == "dock" ]]; then
    if [[ $1 == "home" ]]; then
        defaults delete com.apple.dock persistent-apps
        for application ("$apps[@]"); do
            if [ -d $application ]; then
                dock_fn $application
            fi
        done
        killall Dock
    fi
fi

exit 0
